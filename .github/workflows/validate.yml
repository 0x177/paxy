on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [main]
  pull_request:
    branches: [main]

name: ✔ Validate

jobs:
  fmt:
    name: 📑 Rustfmt
    if: |
      !startsWith(github.event.head_commit.message, 'ci:')
      && !startsWith(github.event.head_commit.message, 'ci(')
    runs-on: ubuntu-latest
    steps:
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v2
      - name: 🧰 Install Rust Toolchain
        id: install_toolchain_step
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - name: 🗂 Set up cargo cache
        id: setup_cache_step
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: 📑 Cargo Fmt
        id: cargo_fmt_step
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --verbose -- --check

  clippy:
    name: 📎 Clippy
    if: |
      !startsWith(github.event.head_commit.message, 'ci:')
      && !startsWith(github.event.head_commit.message, 'ci(')
      && !startsWith(github.event.head_commit.message, 'style:')
      && !startsWith(github.event.head_commit.message, 'style(')
    runs-on: ubuntu-latest
    steps:
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v2
      - name: 🧰 Install Rust Toolchain
        id: install_toolchain_step
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - name: 🗂 Set up cargo cache
        id: setup_cache_step
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: 📎 Clippy
        id: clippy_step
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace -- -D warnings

  check:
    name: ✅ Check
    if: |
      !startsWith(github.event.head_commit.message, 'ci:')
      && !startsWith(github.event.head_commit.message, 'ci(')
      && !startsWith(github.event.head_commit.message, 'docs:')
      && !startsWith(github.event.head_commit.message, 'docs(')
      && !startsWith(github.event.head_commit.message, 'style:')
      && !startsWith(github.event.head_commit.message, 'style(')
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            failable: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            failable: false
          - target: x86_64-apple-darwin
            os: macos-latest
            failable: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            failable: false
          - target: aarch64-apple-darwin
            os: ubuntu-latest
            failable: true
    continue-on-error: ${{ matrix.failable }}
    runs-on: ${{ matrix.os }}
    env:
      IS_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-apple-darwin' }}
    steps:
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v2
      - name: 🧰 Install Rust Toolchain
        id: install_toolchain_step
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: 🗂 Set up cargo cache
        id: setup_cache_step
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: ✅ Cargo Check
        id: cargo_check_step
        uses: actions-rs/cargo@v1
        with:
          command: check
          use-cross: ${{ env.IS_CROSS }}
          args: --workspace --target ${{ matrix.target }}

  test:
    name: 🧪 Test
    if: |
      !startsWith(github.event.head_commit.message, 'ci:')
      && !startsWith(github.event.head_commit.message, 'ci(')
      && !startsWith(github.event.head_commit.message, 'docs:')
      && !startsWith(github.event.head_commit.message, 'docs(')
      && !startsWith(github.event.head_commit.message, 'style:')
      && !startsWith(github.event.head_commit.message, 'style(')
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            failable: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            failable: false
          - target: x86_64-apple-darwin
            os: macos-latest
            failable: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            failable: false
          - target: aarch64-apple-darwin
            os: macos-latest
            failable: true
    continue-on-error: ${{ matrix.failable }}
    runs-on: ${{ matrix.os }}
    env:
      IS_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-apple-darwin' }}
    steps:
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v2
      - name: 🧰 Install Rust Toolchain
        id: install_toolchain_step
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: 🍎💪🐋 Setup MacOS ARM Docker Image
        id: setup_macos_aarch64_docker_step
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        uses: actions-rs/cargo@v1
        with:
          command: build-docker-image
          args: aarch64-apple-darwin-cross --tag local
      - name: 🗂 Set up cargo cache
        id: setup_cache_step
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: 🧪 Cargo Test
        id: cargo_test_step
        uses: actions-rs/cargo@v1
        with:
          command: test
          use-cross: ${{ env.IS_CROSS }}
          args: --workspace --target ${{ matrix.target }}

  grcov:
    name: 🔎 grcov Code Coverage
    if: |
      !startsWith(github.event.head_commit.message, 'ci:')
      && !startsWith(github.event.head_commit.message, 'ci(')
      && !startsWith(github.event.head_commit.message, 'docs:')
      && !startsWith(github.event.head_commit.message, 'docs(')
      && !startsWith(github.event.head_commit.message, 'style:')
      && !startsWith(github.event.head_commit.message, 'style(')
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v2
      - name: 🧰 Install Rust Toolchain
        id: install_toolchain_step
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly # Required for -Zprofile
          override: true
          target: ${{ matrix.target }}
      - name: 🗂 Set up cargo cache
        id: setup_cache_step
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: 🧪 Execute tests
        id: execute_tests_step
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
        with:
          command: test
          args: --workspace --target ${{ matrix.target }}
      - name: 💽 Pre-Installing grcov
        id: preinstall_grcov_step
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          use-tool-cache: true
      - name: 🔎 Gather Coverage Data
        id: coverage_gather_step
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/actions-rs/grcov.yml
          coveralls-token: ${{ secrets.COVERALLS_TOKEN }}
      - name: ⬆ Coveralls Upload
        id: coveralls_upload_step
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel: true
          path-to-lcov: ${{ steps.coverage_gather_step.outputs.report }}

  grcov_finalize:
    name: ✔ Finalize grcov Code Coverage
    if: |
      !startsWith(github.event.head_commit.message, 'ci:')
      && !startsWith(github.event.head_commit.message, 'ci(')
      && !startsWith(github.event.head_commit.message, 'docs:')
      && !startsWith(github.event.head_commit.message, 'docs(')
      && !startsWith(github.event.head_commit.message, 'style:')
      && !startsWith(github.event.head_commit.message, 'style(')
    runs-on: ubuntu-latest
    needs: grcov
    steps:
      - name: ✔ Coveralls Finalization
        id: coveralls_finalization_step
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
