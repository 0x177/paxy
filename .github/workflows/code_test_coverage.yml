on:
  push:
    paths:
      - '.github/workflows/code_test_coverage.yml' # Run when this workflow changes
      - '**/src/**'
    branches: [main]
  pull_request:
    paths:
      - '.github/workflows/code_test_coverage.yml' # Run when this workflow changes
      - '**/src/**'
    branches: [main]
  workflow_dispatch: # Run when manually triggered
  workflow_call: # Run when called by another workflow

name: ðŸ”Ž Code Test Coverage Workflow

jobs:
  coverage_job:
    name: ðŸ”Ž Code Test Coverage Job
    strategy:
      fail-fast: true
      matrix:
        platform: 
          - linux
          # - windows
          # - apple
        cpu_architecture: [x86_64]
        include:
          - platform: linux
            cicd_runner: ubuntu-latest
          # - platform: windows
          #   cicd_runner: windows-latest
          # - platform: apple
          #   cicd_runner: macos-latest
          - compilation_target: x86_64-unknown-linux-gnu
            cpu_architecture: x86_64
            platform: linux
            toolchain: gnu
          # - compilation_target: x86_64-pc-windows-msvc
          #   cpu_architecture: x86_64
          #   platform: windows
          #   toolchain: msvc
          # - compilation_target: x86_64-apple-darwin
          #   cpu_architecture: x86_64
          #   platform: apple
          #   toolchain: darwin
    runs-on: ${{ matrix.cicd_runner }}           
    if: |
      !startsWith(github.event.head_commit.message, 'style:')
      && !startsWith(github.event.head_commit.message, 'style(')
      && !startsWith(github.event.head_commit.message, 'chore:')
      && !startsWith(github.event.head_commit.message, 'chore(')              
    steps:
      - name: ðŸŽŸ Checkout Git Repository Step
        id: repository_checkout_step
        uses: actions/checkout@v4
      - name: ðŸ§° Install Rust Toolchain Step
        id: toolchain_install_step
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: ${{ matrix.compilation_target }}          
          components: rustc, cargo
      - name: ðŸ”„ Install Cross-Compilation Tools Step
        id: cross_install_step
        if: ${{ matrix.cpu_architecture != 'x86_64' }}
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          targets: ${{ matrix.compilation_target }}          
      - name: ðŸ—‚ Setup Cache Step
        id: cache_setup_step
        uses: Swatinem/rust-cache@v2
      - name: ðŸ”Ž Generate Code Coverage Step
        id: coverage_generation_step
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: ðŸ“Š Upload coverage to Codecov Step
        id: coverage_upload_step
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true
